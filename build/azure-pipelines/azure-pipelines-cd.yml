# Continuous Delivery Pipeline
# https://aka.ms/yaml

resources:
  pipelines:
  - pipeline: 'CI'
    source: 'jasoth.MSAL.PS.CI'
    branch: master
    #trigger:
    #  branches:
    #    - master

parameters:
- name: vmImage
  displayName: 'Pool Image'
  type: string
  default: windows-latest
  values:
  - windows-latest
  - ubuntu-latest
  - macOS-latest

trigger: none
pr: none

variables:
  moduleName: 'MSAL.PS'
  vmImage: '${{ parameters.vmImage }}'
  artifactModule: 'PSModule'
  artifactModuleSigned: 'PSModuleSigned'
  artifactModulePackage: 'PSModulePackage'

pool:
  vmImage: $(vmImage)

stages:
- stage: Build
  displayName: 'Finalize Build'
  jobs: 
#  - job: Prepare
#    variables:
#      skipComponentGovernanceDetection: true
#    steps:
#    #- checkout: none
#    - download: CI
#      artifact: '$(artifactModule)'
#    - task: PowerShell@2
#      name: ModuleInfo
#      displayName: 'Get PowerShell Module Information'
#      inputs:
#        filePath: '$(System.DefaultWorkingDirectory)/build/Get-PSModuleInfo.ps1'
#        arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/CI/$(artifactModule)/*/*.psd1" -TrimRevisionNumber'
#        pwsh: true

#  - job: Build
#    displayName: 'Update Build'
#    dependsOn: Prepare
#    variables:
#      moduleName: '$[ dependencies.Prepare.outputs[''ModuleInfo.moduleName''] ]'
#      moduleVersion.Prefix: '$[ dependencies.Prepare.outputs[''ModuleInfo.moduleVersion''] ]'
#      moduleVersion.Revision: '$[ counter(variables[''moduleVersion.Prefix''], 1) ]'
#      moduleVersion: '$[ coalesce(variables[''moduleVersionOverride''], format(''{0}.{1}'', variables[''moduleVersion.Prefix''], variables[''moduleVersion.Revision''])) ]'
#      skipComponentGovernanceDetection: true
#    steps:
#    - download: CI
#      artifact: '$(artifactModule)'
#    - task: CopyFiles@2
#      displayName: 'Copy Source to Staging'
#      inputs:
#        SourceFolder: '$(Pipeline.Workspace)/CI/$(artifactModule)'
#        Contents: '**'
#        TargetFolder: '$(Pipeline.Workspace)/$(artifactModule)'
#        preserveTimestamp: true
#    - task: PowerShell@2
#      displayName: 'Update PowerShell Module Manifest'
#      inputs:
#        filePath: '$(System.DefaultWorkingDirectory)/build/Update-PSModuleManifest.ps1'
#        arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/$(artifactModule)/$(moduleName)/$(moduleName).psd1" -ModuleVersion "$(moduleVersion)"'
#        pwsh: true
#    - task: PublishPipelineArtifact@1
#      displayName: 'Publish PowerShell Module Artifact'
#      inputs:
#        targetPath: '$(Pipeline.Workspace)/$(artifactModule)'
#        artifact: '$(artifactModule)'
#        publishLocation: 'pipeline'

  - job: Sign
#    dependsOn:
#    - Prepare
#    - Build
    variables:
#      moduleName: '$[ dependencies.Prepare.outputs[''ModuleInfo.moduleName''] ]'
      skipComponentGovernanceDetection: true
    pool:
      vmImage: 'windows-latest'
    steps:
    - download: 'CI'
      artifact: '$(artifactModule)'
    - template: template-psmodule-sign.yml
      parameters:
        moduleName: '$(moduleName)'
        pipelineId: 'CI'

- stage: Package
  displayName: 'Standalone Package'
  dependsOn: Build
  jobs: 
  - job: Prepare
    variables:
      skipComponentGovernanceDetection: true
    steps:
    - download: current
      artifact: '$(artifactModuleSigned)'
    - task: PowerShell@2
      name: ModuleInfo
      displayName: 'Get PowerShell Module Information'
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/build/Get-PSModuleInfo.ps1'
        arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/$(artifactModuleSigned)/*/*.psd1"'
        pwsh: true

  - deployment: Package
    dependsOn: Prepare
    environment: Standalone
    variables:
      moduleName: '$[ dependencies.Prepare.outputs[''ModuleInfo.moduleName''] ]'
      moduleVersion: '$[ dependencies.Prepare.outputs[''ModuleInfo.moduleVersion''] ]'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: template-psmodule-package.yml
            parameters:
              moduleName: '$(moduleName)'
              moduleVersion: '$(moduleVersion)'

- stage: DeployTest
  displayName: 'Deploy Test'
  dependsOn:
  - Build
  #- Package
  jobs: 
  #- job: Prepare
  #  variables:
  #    skipComponentGovernanceDetection: true
  #  steps:
  #  - download: current
  #    artifact: '$(artifactModuleSigned)'
  #  - task: PowerShell@2
  #    name: ModuleInfo
  #    displayName: 'Get PowerShell Module Information'
  #    inputs:
  #      filePath: '$(System.DefaultWorkingDirectory)/build/Get-PSModuleInfo.ps1'
  #      arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/$(artifactModuleSigned)/*/*.psd1"'
  #      pwsh: true

  - deployment: Publish
    environment: Test
    #dependsOn: Prepare
    #variables:
    #  moduleName: '$[ dependencies.Prepare.outputs[''ModuleInfo.moduleName''] ]'
    #  moduleVersion: '$[ dependencies.Prepare.outputs[''ModuleInfo.moduleVersion''] ]'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: template-psmodule-publish.yml
            parameters:
              moduleName: '$(moduleName)'
              RepositorySourceLocation: 'https://www.poshtestgallery.com/api/v2'
              NuGetApiKeySecretName: 'PSTestGallery-API-Key'
              Unlist: true
          #- task: GitHubRelease@1
          #  displayName: 'Create Release on GitHub'
          #  inputs:
          #    gitHubConnection: 'GitHub jasoth'
          #    repositoryName: '$(Build.Repository.Name)'
          #    action: 'create'
          #    target: '$(Build.SourceVersion)'
          #    tagSource: 'userSpecifiedTag'
          #    tag: 'v$(moduleVersion)'
          #    title: '$(moduleName) v$(moduleVersion)'
          #    assets: '$(Pipeline.Workspace)/$(artifactModulePackage)/*'
          #    isDraft: true
          #    addChangeLog: false

- stage: Production
  displayName: 'Deploy Production'
  dependsOn:
  - Build
  - Package
  jobs: 
  - job: Prepare
    variables:
      skipComponentGovernanceDetection: true
    steps:
    - download: current
      artifact: '$(artifactModuleSigned)'
    - task: PowerShell@2
      name: ModuleInfo
      displayName: 'Get PowerShell Module Information'
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/build/Get-PSModuleInfo.ps1'
        arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/$(artifactModuleSigned)/*/*.psd1"'
        pwsh: true

  - deployment: Publish
    environment: Production
    dependsOn: Prepare
    variables:
      moduleName: '$[ dependencies.Prepare.outputs[''ModuleInfo.moduleName''] ]'
      moduleVersion: '$[ dependencies.Prepare.outputs[''ModuleInfo.moduleVersion''] ]'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: template-psmodule-publish.yml
            parameters:
              moduleName: '$(moduleName)'
              RepositorySourceLocation: 'https://www.powershellgallery.com/api/v2'
              NuGetApiKeySecretName: 'PSGallery-API-Key'
          - task: GitHubRelease@1
            displayName: 'Create Release on GitHub'
            inputs:
              gitHubConnection: 'GitHub jasoth'
              repositoryName: '$(Build.Repository.Name)'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'userSpecifiedTag'
              tag: 'v$(moduleVersion)'
              title: '$(moduleName) v$(moduleVersion)'
              assets: '$(Pipeline.Workspace)/$(artifactModulePackage)/*'
              addChangeLog: false
